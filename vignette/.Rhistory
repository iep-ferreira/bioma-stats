sliderInput("size", "Cutout diameter (km)", min = 0.5, max = 5, value = 1, step = 0.1),
selectInput("yr", "View Reference Year", choices = seq(1985, 2021, by = 1)),
actionButton("playButton", "Play")
),
mainPanel(
tabsetPanel(type = "tabs",
#                  tabPanel("Study Area", verbatimTextOutput("preencher")),
tabPanel("Time Series", plotOutput("plot")),
tabPanel("Annual Maps", plotOutput("plot2")),
tabPanel("Data Table", tableOutput("summary"))
)
)
)
# Define server
server <- function(input, output, session) {
recortes <- eventReactive(input$playButton,{
cutout <- make_polygon(lat = -23.602, lon = -48.524, size = as.numeric(input$size), shape = input$shape)
recor <- load_rasters(start=as.numeric(input$start), end = 2021, data_from = "example")
return(recor)
})
observeEvent(input$start,{
updateSelectInput(session, "yr", "View Reference Year", choices = as.numeric(input$start):2021)
})
observeEvent(input$playButton, {
output$summary <- renderTable({
results <- get_area(recortes())
DT::datatable(results$aggregate_data)
})
output$plot <- renderPlot({
results <- get_area(recortes())
p <- results$time_series # assuming this returns a ggplot object
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
observeEvent(input$yr, {
output$plot2 <- renderPlot({
p <- land_vis(recortes(), as.numeric(input$yr))
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
}
```
# Define UI
ui <- fluidPage(
inputPanel(
selectInput("shape", "Choose the cutout shape:",list("circle","square","hexagon")),
sliderInput("start", "Select the study's start year:", min = 1985, max = 2021, value = 1985, step = 1),
sliderInput("size", "Cutout diameter (km)", min = 0.5, max = 5, value = 1, step = 0.1),
selectInput("yr", "View Reference Year", choices = seq(1985, 2021, by = 1)),
actionButton("playButton", "Play")
),
mainPanel(
tabsetPanel(type = "tabs",
#                  tabPanel("Study Area", verbatimTextOutput("preencher")),
tabPanel("Time Series", plotOutput("plot")),
tabPanel("Annual Maps", plotOutput("plot2")),
tabPanel("Data Table", tableOutput("summary"))
)
)
)
# Define server
server <- function(input, output, session) {
recortes <- eventReactive(input$playButton,{
cutout <- make_polygon(lat = -23.602, lon = -48.524, size = as.numeric(input$size), shape = input$shape)
recor <- load_rasters(start=as.numeric(input$start), end = 2021, data_from = "example")
return(recor)
})
observeEvent(input$start,{
updateSelectInput(session, "yr", "View Reference Year", choices = as.numeric(input$start):2021)
})
observeEvent(input$playButton, {
output$summary <- renderTable({
results <- get_area(recortes())
DT::datatable(results$aggregate_data)
})
output$plot <- renderPlot({
results <- get_area(recortes())
p <- results$time_series # assuming this returns a ggplot object
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
observeEvent(input$yr, {
output$plot2 <- renderPlot({
p <- land_vis(recortes(), as.numeric(input$yr))
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
}
# Run the application
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
# para remover versões anteriores do pacote
#remove.packages("biomastats")
library(devtools)
#devtools::install_github("iep-ferreira/biomastats")
library(biomastats)
(path_package <- system.file(package = "biomastats"))
# Instalar e carregar o pacote geobr
install.packages("geobr")
install.packages("geobr")
# Instalar e carregar o pacote geobr
#install.packages("geobr")
library(geobr)
# Definir o código do município desejado (IBGE)
codigo_municipio <- 2918100
# Obter o shapefile do município
shapefile_municipio <- geobr::read_municipality(code_muni = codigo_municipio, year = 2020)
library(mapview)
mapview(sf::read_sf(shapefile_municipio))
library(sf)
library(mapview)
mapview(sf::read_sf(shapefile_municipio))
plot(shapefile_municipio)
sf::read_sf(shapefile_municipio)
mapview(shapefile_municipio)
crs(shapefile_municipio)
shapefile_municipio@info
shapefile_municipio
recortes <- load_rasters(shape_path = shapefile_municipio, start=1985, end=2020, data_from = "folder", path_folder <- "D:/iuri-external-hd/mapbiomas")
objeto_sf <- st_read(shapefile_municipio)
objeto_sf <- st_as_sf(shapefile_municipio)
recortes <- load_rasters(shape_path = shapefile_municipio, start=1985, end=2020, data_from = "folder", path_folder <- "D:/iuri-external-hd/mapbiomas")
recortes <- load_rasters(shape_path = objeto_sf, start=1985, end=2020, data_from = "folder", path_folder <- "D:/iuri-external-hd/mapbiomas")
st_write(sf_objeto, dsn = "C:/Users/ferre/OneDrive/Área de Trabalho/CeMECA/IC vinculadas/IC-2023")
st_write(sf_objeto, dsn = "C:/Users/ferre/OneDrive/Área de Trabalho/CeMECA/IC vinculadas/IC-2023")
st_write(objeto_sf , dsn = "C:/Users/ferre/OneDrive/Área de Trabalho/CeMECA/IC vinculadas/IC-2023")
st_write(objeto_sf , dsn = "C:/Users/ferre/OneDrive/Área de Trabalho/CeMECA/IC vinculadas/IC-2023")
st_write(objeto_sf , "C:/Users/ferre/OneDrive/Área de Trabalho/CeMECA/IC vinculadas/IC-2023")
st_write(objeto_sf , "shape", "C:/Users/ferre/OneDrive/Área de Trabalho/CeMECA/IC vinculadas/IC-2023")
knitr::opts_chunk$set(echo = TRUE)
# para remover versões anteriores do pacote
#remove.packages("biomastats")
library(devtools)
#devtools::install_github("iep-ferreira/biomastats")
library(biomastats)
(path_package <- system.file(package = "biomastats"))
ita_shp <- file.path(path_package, "shp/itapetininga.shp")
library(mapview)
mapview(sf::read_sf(ita_shp))
region <- make_polygon(lat = -23.605, lon = -48.529, size = 1.5, shape = "hexagon")
shp_path <- file.path(path_package, "shp/polygon.shp")
library(mapview)
mapview(sf::read_sf(shp_path))
recortes <- load_rasters(shape_path = shp_path, start=1985, end=2021, data_from = "example")
results <- get_area(recortes)
results$time_series
head(results$aggregate_data)
land_vis(recortes, year = 1985)
land_vis(recortes, year = 2000)
land_vis(recortes, year = 2020)
land_dist(results, year = 2020, type = "barplot")
library(shiny)
library(devtools)
#devtools::install_github("iep-ferreira/biomastats")
library(biomastats)
library(leaflet)
library(sf)
library(DT)
library(kableExtra)
library(ggplot2)
# Define UI
ui <- fluidPage(
inputPanel(
selectInput("shape", "Choose the cutout shape:",list("circle","square","hexagon")),
sliderInput("start", "Select the study's start year:", min = 1985, max = 2021, value = 1985, step = 1),
sliderInput("size", "Cutout diameter (km)", min = 0.5, max = 5, value = 1, step = 0.1),
selectInput("yr", "View Reference Year", choices = seq(1985, 2021, by = 1)),
actionButton("playButton", "Play")
),
mainPanel(
tabsetPanel(type = "tabs",
#                  tabPanel("Study Area", verbatimTextOutput("preencher")),
tabPanel("Time Series", plotOutput("plot")),
tabPanel("Annual Maps", plotOutput("plot2")),
tabPanel("Data Table", tableOutput("summary"))
)
)
)
# Define server
server <- function(input, output, session) {
recortes <- eventReactive(input$playButton,{
cutout <- make_polygon(lat = -23.602, lon = -48.524, size = as.numeric(input$size), shape = input$shape)
recor <- load_rasters(start=as.numeric(input$start), end = 2021, data_from = "example")
return(recor)
})
observeEvent(input$start,{
updateSelectInput(session, "yr", "View Reference Year", choices = as.numeric(input$start):2021)
})
observeEvent(input$playButton, {
output$summary <- renderTable({
results <- get_area(recortes())
DT::datatable(results$aggregate_data)
})
output$plot <- renderPlot({
results <- get_area(recortes())
p <- results$time_series # assuming this returns a ggplot object
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
observeEvent(input$yr, {
output$plot2 <- renderPlot({
p <- land_vis(recortes(), as.numeric(input$yr))
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
}
# Run the application
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
# para remover versões anteriores do pacote
#remove.packages("biomastats")
library(devtools)
# para remover versões anteriores do pacote
#remove.packages("biomastats")
library(devtools)
library(biomastats)
library(leaflet)
library(sf)
leaflet() %>%
addProviderTiles(providers$OpenTopoMap ) %>% setView(lat =  -23.2549, lng =  -48.9913, zoom=12)
leaflet() %>%
addProviderTiles(providers$OpenTopoMap ) %>% setView(lat =  -23.2549, lng =  -48.9913, zoom=13.5)
leaflet() %>%
addProviderTiles(providers$OpenTopoMap ) %>% setView(lat =  -23.2549, lng =  -48.9913, zoom=13)
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery ) %>% setView(lat =  -23.2549, lng =  -48.9913, zoom=13)
cutout <- make_polygon(lat =  -23.2549, lon =  -48.9913, size = 1, shape = "hexagon")
recortes <- load_rasters( start=1985, end=2021, data_from = "example")
#install.packages("flextable")
results <- get_area(recortes)
land_vis(recortes, year = 1990)
land_vis(recortes, year = 2020)
land_vis(recortes, year = 1985)
cutout <- make_polygon(lat =  -23.2549, lon =  -48.9913, size = 3, shape = "hexagon")
recortes <- load_rasters( start=1985, end=2021, data_from = "example")
#install.packages("flextable")
results <- get_area(recortes)
results$time_series
land_vis(recortes, year = 1985)
file.name <- file.path(figures_path,"area-1985.tiff")
land_vis(recortes, year = 1985)
land_vis(recortes, year = 1985)
land_vis(recortes, year = 2000)
land_vis(recortes, year = 2023)
land_vis(recortes, year = 2020)
library(shiny)
library(devtools)
#devtools::install_github("iep-ferreira/biomastats")
library(biomastats)
library(leaflet)
library(sf)
library(DT)
library(kableExtra)
library(ggplot2)
# Define UI
ui <- fluidPage(
inputPanel(
selectInput("shape", "Choose the cutout shape:",list("circle","square","hexagon")),
sliderInput("start", "Select the study's start year:", min = 1985, max = 2021, value = 1985, step = 1),
sliderInput("size", "Cutout diameter (km)", min = 0.5, max = 5, value = 1, step = 0.1),
selectInput("yr", "View Reference Year", choices = seq(1985, 2021, by = 1)),
actionButton("playButton", "Play")
),
mainPanel(
tabsetPanel(type = "tabs",
#                  tabPanel("Study Area", verbatimTextOutput("preencher")),
tabPanel("Time Series", plotOutput("plot")),
tabPanel("Annual Maps", plotOutput("plot2")),
tabPanel("Data Table", tableOutput("summary"))
)
)
)
# Define server
server <- function(input, output, session) {
recortes <- eventReactive(input$playButton,{
cutout <- make_polygon(lat = -23.602, lon = -48.524, size = as.numeric(input$size), shape = input$shape)
recor <- load_rasters(start=as.numeric(input$start), end = 2021, data_from = "example")
return(recor)
})
observeEvent(input$start,{
updateSelectInput(session, "yr", "View Reference Year", choices = as.numeric(input$start):2021)
})
observeEvent(input$playButton, {
output$summary <- renderTable({
results <- get_area(recortes())
DT::datatable(results$aggregate_data)
})
output$plot <- renderPlot({
results <- get_area(recortes())
p <- results$time_series # assuming this returns a ggplot object
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
observeEvent(input$yr, {
output$plot2 <- renderPlot({
p <- land_vis(recortes(), as.numeric(input$yr))
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
}
# Run the application
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
# para remover versões anteriores do pacote
#remove.packages("biomastats")
library(devtools)
#devtools::install_github("iep-ferreira/biomastats")
library(biomastats)
library(leaflet)
library(sf)
(path_package <- system.file(package = "biomastats"))
figures_path <- "C:/Users/ferre/OneDrive/Área de Trabalho/pesquisa/Artigo-Biomastats-2023/figuras"
leaflet() %>%
addProviderTiles(providers$OpenTopoMap ) %>% setView(lat =  -23.597323, lng =  -48.532440, zoom=8)
leaflet() %>%
addProviderTiles(providers$OpenTopoMap ) %>% setView(lat =  -23.597323, lng =  -48.532440, zoom=14)
leaflet() %>%
addProviderTiles(providers$OpenTopoMap ) %>% setView(lat =  -23.597323, lng =  -48.532440, zoom=12)
library(shiny)
library(devtools)
#devtools::install_github("iep-ferreira/biomastats")
library(biomastats)
library(leaflet)
library(sf)
library(DT)
library(kableExtra)
library(ggplot2)
# Define UI
ui <- fluidPage(
inputPanel(
selectInput("shape", "Choose the cutout shape:",list("circle","square","hexagon")),
sliderInput("start", "Select the study's start year:", min = 1985, max = 2021, value = 1985, step = 1),
sliderInput("size", "Cutout diameter (km)", min = 0.5, max = 5, value = 1, step = 0.1),
selectInput("yr", "View Reference Year", choices = seq(1985, 2021, by = 1)),
actionButton("playButton", "Play")
),
mainPanel(
tabsetPanel(type = "tabs",
#                  tabPanel("Study Area", verbatimTextOutput("preencher")),
tabPanel("Time Series", plotOutput("plot")),
tabPanel("Annual Maps", plotOutput("plot2")),
tabPanel("Data Table", tableOutput("summary"))
)
)
)
# Define server
server <- function(input, output, session) {
recortes <- eventReactive(input$playButton,{
cutout <- make_polygon(lat = -23.602, lon = -48.524, size = as.numeric(input$size), shape = input$shape)
recor <- load_rasters(start=as.numeric(input$start), end = 2021, data_from = "example")
return(recor)
})
observeEvent(input$start,{
updateSelectInput(session, "yr", "View Reference Year", choices = as.numeric(input$start):2021)
})
observeEvent(input$playButton, {
output$summary <- renderTable({
results <- get_area(recortes())
DT::datatable(results$aggregate_data)
})
output$plot <- renderPlot({
results <- get_area(recortes())
p <- results$time_series # assuming this returns a ggplot object
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
observeEvent(input$yr, {
output$plot2 <- renderPlot({
p <- land_vis(recortes(), as.numeric(input$yr))
p <- p + theme(text = element_text(size = 20), # change overall text size
axis.title = element_text(size = 24), # change axis title size
legend.title = element_text(size = 22)) # change legend title size
print(p)
}, height=500 , width=800 ) # end renderPlot
}) # end observeEvent
}
# Run the application
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(biomastats)
library(leaflet)
library(sf)
(path_package <- system.file(package = "biomastats"))
r_93 <- raster( file.path(path_package("inst/maps-library/frag93.tif"))  )
library(raster)
r_93 <- raster( file.path(path_package("inst/maps-library/frag93.tif"))  )
(path_package <- system.file(package = "biomastats"))
figures_path <- "C:/Users/ferre/OneDrive/Área de Trabalho/pesquisa/Artigo-Biomastats-2023/figuras"
shp_file <- file.path(path_package, "shp/itapetininga.shp")
shp_brasil <- file.path(path_package,"shp/brasil_cortado.shp")
brasil <- sf::st_transform(brasil, crs = 4326)
shp_brasil <- file.path(path_package,"shp/brasil_cortado.shp")
brasil <- sf::st_transform(shpbrasil, crs = 4326)
brasil <- sf::st_transform(shp_brasil, crs = 4326)
shp_brasil <- file.path(path_package,"shp/brasil_cortado.shp")
brasil <- sf::st_transform(shp_brasil, crs = 4326)
shp_brasil_file <- file.path(path_package,"shp/brasil_cortado.shp")
shp_ita <- sf::read_sf(shp_file)
shp_ita
shp_ita <- sf::read_sf(shp_file, crs = 4326)
shp_ita <- sf::st_transform(sf::read_sf(shp_file), crs = 4326)
shp_ita
shp_brasil <- sf::st_transform(sf::read_sf(shp_brasil), crs = 4326)
shp_brasil <- sf::st_transform(sf::read_sf(shp_brasil_file), crs = 4326)
shp_brasil
library(mapview)
mapview(shp_ita) + mapview(shp_brasil)
recortes <- load_rasters(shape_path = shp_file,  start=1985, end=2021, data_from = "example")
land_vis(recortes, year = 2013)
knitr::opts_chunk$set(echo = FALSE)
library(biomastats)
library(leaflet)
library(sf)
library(raster)
(path_package <- system.file(package = "biomastats"))
shp_file <- file.path(path_package, "shp/UFSCar.shp")
recortes <- load_rasters(shape_path = shp_file,  start=2010, end=2020, data_from = "example")
land_vis(recortes, year = 2017)
library(biomastats)
library(leaflet)
library(sf)
library(raster)
(path_package <- system.file(package = "biomastats"))
shp_file <- file.path(path_package, "shp/UFSCar.shp")
recortes <- load_rasters(shape_path = shp_file,  start=2010, end=2020, data_from = "example")
land_vis(recortes, year = 2017)
library(biomastats)
library(leaflet)
library(sf)
library(raster)
(path_package <- system.file(package = "biomastats"))
shp_file <- file.path(path_package, "shp/UFSCar.shp")
recortes <- load_rasters(shape_path = shp_file,  start=1985, end=2020, data_from = "example")
land_vis(recortes, year = 2017)
land_vis(recortes, year = 2020)
leaflet(shp_file) %>%
addProviderTiles(providers$OpenTopoMap )
leaflet(shp_file) %>%
addProviderTiles(providers$OpenTopoMap ) %>% setView(lat =  -23.597323, lng =  -48.532440, zoom=12)
ufscar_shp <- sf::read_sf(shp_file)
ufscar_shp <- sf::st_transform(ufscar_shp, crs = 4326)
leaflet(shp_file) %>%
addProviderTiles(providers$OpenTopoMap ) %>% addPolygons(data = ufscar_shp) %>% setView(lat = -23.602, lng = -48.524, zoom=14.4)
library(osmdata)
bbox <- st_bbox(my_shp)
library(osmdata)
bbox <- st_bbox(shp_file)
bbox <- st_bbox(ufscar_shp)
rodovias_data <- opq(bbox = bbox) %>%
add_osm_feature(key = 'highway') %>%
osmdata_sf()
library(mapview)
mapview(my_shp) + mapview(rodovias_data$osm_lines)
mapview(ufscar_shp) + mapview(rodovias_data$osm_lines)
cons_data <- opq(bbox = bbox) %>%
add_osm_feature(key = 'building') %>%
osmdata_sf()
mapview(ufscar_shp) + mapview(cons_data$osm_lines)
cons_data <- opq(bbox = bbox) %>%
add_osm_feature(key = 'building') %>%
osmdata_sf()
mapview(ufscar_shp) + mapview(cons_data$osm_polygons)
agua_data <- opq(bbox = bbox) %>%
add_osm_feature(key = 'waterway') %>%
osmdata_sf()
mapview(ufscar_shp) + mapview(agua_data$osm_polygons) + mapview(agua_data$osm_lines)
mapview(ufscar_shp)  + mapview(agua_data$osm_lines)
agua_data <- opq(bbox = bbox) %>%
add_osm_feature(key = 'waterway') %>%
osmdata_sf()
mapview(ufscar_shp)  + mapview(agua_data$osm_lines)
knitr::opts_chunk$set(echo = TRUE)
# para remover versões anteriores do pacote
#remove.packages("biomastats")
library(devtools)
#devtools::install_github("iep-ferreira/biomastats")
library(biomastats)
(path_package <- system.file(package = "biomastats"))
ita_shp <- file.path(path_package, "shp/itapetininga.shp")
library(mapview)
mapview(sf::read_sf(ita_shp))
recortes <- load_rasters(shape_path = ita_shp, start=1985, end=2020, data_from = "example")
results <- get_area(recortes)
land_vis(recortes, year = 2007)
results$time_series
